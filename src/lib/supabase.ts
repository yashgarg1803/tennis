import { createBrowserClient } from '@supabase/ssr'
import { GameState } from './game'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

export const supabase = createBrowserClient(supabaseUrl, supabaseAnonKey)

// Database types
export interface User {
  id: string
  email: string
  name: string
  avatar_url?: string
  created_at: string
}

export interface GameRecord {
  id: string // This will be a UUID generated by the database
  player1_id: string
  player2_id: string | null
  player1_name: string
  player2_name: string
  starting_troops: number
  winner: 'player1' | 'player2' | null
  rounds: any[]
  game_type: 'single' | 'multiplayer'
  created_at: string
  finished_at?: string
}

export interface UserStats {
  user_id: string
  games_played: number
  games_won: number
  total_rounds_won: number
  total_troops_deployed: number
  created_at: string
  updated_at: string
}

// Save game result to database
export async function saveGameResult(gameState: GameState, userId: string) {
  try {
    console.log('Saving game result:', { gameState, userId })
    
    // Calculate total troops deployed by player
    const playerTroopsDeployed = gameState.rounds.reduce((total, round) => {
      return total + round.player1Troops
    }, 0)

    // Calculate total rounds won by player
    const playerRoundsWon = gameState.player1.roundWins

    console.log('Calculated stats:', { playerTroopsDeployed, playerRoundsWon })

    // Insert game record
    const gameData = {
      player1_id: userId,
      player2_id: null, // AI opponent - no user ID
      player1_name: gameState.player1.name,
      player2_name: gameState.player2.name,
      starting_troops: gameState.startingTroops,
      winner: gameState.winner,
      rounds: gameState.rounds,
      game_type: 'single',
      created_at: gameState.createdAt.toISOString(),
      finished_at: gameState.updatedAt.toISOString()
    }

    console.log('Attempting to insert game data:', JSON.stringify(gameData, null, 2))

    const { data: gameResult, error: gameError } = await supabase
      .from('game_records')
      .insert(gameData)
      .select()
      .single()

    if (gameError) {
      console.error('Error saving game - details:', {
        error: gameError,
        code: gameError.code,
        message: gameError.message,
        details: gameError.details,
        hint: gameError.hint,
        gameData: JSON.stringify(gameData, null, 2)
      })
      return { success: false, error: gameError }
    }

    console.log('Game saved successfully:', gameResult)

    // Update or insert user stats
    const { data: existingStats } = await supabase
      .from('user_stats')
      .select('*')
      .eq('user_id', userId)
      .single()

    if (existingStats) {
      // Update existing stats
      const statsUpdate = {
        games_played: existingStats.games_played + 1,
        games_won: existingStats.games_won + (gameState.winner === 'player1' ? 1 : 0),
        total_rounds_won: existingStats.total_rounds_won + playerRoundsWon,
        total_troops_deployed: existingStats.total_troops_deployed + playerTroopsDeployed,
        updated_at: new Date().toISOString()
      }

      console.log('Updating existing stats:', statsUpdate)

      const { error: statsError } = await supabase
        .from('user_stats')
        .update(statsUpdate)
        .eq('user_id', userId)

      if (statsError) {
        console.error('Error updating user stats:', statsError)
        return { success: false, error: statsError }
      }
    } else {
      // Insert new stats
      const newStats = {
        user_id: userId,
        games_played: 1,
        games_won: gameState.winner === 'player1' ? 1 : 0,
        total_rounds_won: playerRoundsWon,
        total_troops_deployed: playerTroopsDeployed,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }

      console.log('Creating new stats:', newStats)

      const { error: statsError } = await supabase
        .from('user_stats')
        .insert(newStats)

      if (statsError) {
        console.error('Error creating user stats:', statsError)
        return { success: false, error: statsError }
      }
    }

    console.log('Game and stats saved successfully')
    return { success: true, gameData: gameResult }
  } catch (error) {
    console.error('Error in saveGameResult:', error)
    return { success: false, error }
  }
}

// Get user stats
export async function getUserStats(userId: string) {
  try {
    const { data, error } = await supabase
      .from('user_stats')
      .select('*')
      .eq('user_id', userId)
      .single()

    if (error) {
      console.error('Error fetching user stats:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in getUserStats:', error)
    return null
  }
}

// Get recent games for user
export async function getRecentGames(userId: string, limit: number = 10) {
  try {
    const { data, error } = await supabase
      .from('game_records')
      .select('*')
      .or(`player1_id.eq.${userId},player2_id.eq.${userId}`)
      .order('created_at', { ascending: false })
      .limit(limit)

    if (error) {
      console.error('Error fetching recent games:', error)
      return []
    }

    return data || []
  } catch (error) {
    console.error('Error in getRecentGames:', error)
    return []
  }
}

// Get a specific game by ID
export async function getGameById(gameId: string) {
  try {
    const { data, error } = await supabase
      .from('game_records')
      .select('*')
      .eq('id', gameId)
      .single()

    if (error) {
      console.error('Error fetching game:', error)
      return null
    }

    return data
  } catch (error) {
    console.error('Error in getGameById:', error)
    return null
  }
} 